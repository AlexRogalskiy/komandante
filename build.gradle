/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 */

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin on the JVM.
    id 'org.jetbrains.kotlin.jvm' version '1.3.41'

    // shadowJar
    id 'com.github.johnrengelman.shadow' version '5.0.0'
}

group = 'com.hasanozgan.komandante'
version = '0.0.1'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'
//apply plugin: 'com.github.johnrengelman.shadow'

// versions
def javaVersion = JavaVersion.VERSION_1_8
def kotlinVersion = "1.3.41"
def kotlinXCoroutinesVersion = "1.3.0"
def arrowVersion = "0.9.0"
def rxjavaVersion = "2.2.0"
def rxKotlinVersion = "2.2.0"
def hamcrestVersion = "2.0.0.0"
def h2Version = "1.4.199"
def hikariVersion = "3.3.1"
def mockkVersion = "1.9.3"
def exposedVersion = "0.16.1"
def gsonVersion = "2.8.5"
def slf4jVersion = "1.7.25"
def logbackVersion = "1.2.3"

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

// integration test setup starting
configurations {
    testIntegrationImplementation.extendsFrom testImplementation
    testIntegrationRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    main {
        output.dir file("out")
    }
    test {
        output.dir file("out")
    }
    testIntegration {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test-integration/kotlin')
        }
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test-integration/java')
            output.dir file('out')
        }
        resources.srcDir file('src/test-integration/resources')
    }
}

test {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED" //,"STARTED"
    }

    finalizedBy jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled true
        }
    }
}

task testIntegration(type: Test) {
    testClassesDirs = sourceSets.testIntegration.output.classesDirs
    classpath = sourceSets.testIntegration.runtimeClasspath
    mustRunAfter test
}

check.dependsOn testIntegration

testIntegration {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED" //,"STARTED"
        displayGranularity 1
    }
}

shadowJar {
    mergeServiceFiles()
}

idea {
    module {
        testSourceDirs += sourceSets.testIntegration.java.srcDirs
        testSourceDirs += sourceSets.testIntegration.kotlin.srcDirs
        testResourceDirs += sourceSets.testIntegration.resources.srcDirs
        scopes.TEST.plus += [configurations.testIntegrationCompile]
    }
}
// integration test setup finished

// dependency kotlin hack: fixed different kotlin-reflect versions on dependencies
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'org.jetbrains.kotlin' && requested.name == 'kotlin-reflect') {
            details.useVersion kotlinVersion
        }
    }
}

dependencies {
    // Use the Kotlin JDK 8 standard library.
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    // KotlinX Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinXCoroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactive:$kotlinXCoroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$kotlinXCoroutinesVersion"

    // Arrow
    implementation "io.arrow-kt:arrow-core-data:$arrowVersion"
    implementation "io.arrow-kt:arrow-effects-extensions:$arrowVersion"

    // RXJava
    implementation "io.reactivex.rxjava2:rxjava:$rxjavaVersion"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxKotlinVersion"

    // Reflection
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    // Hikari JPA datasource connection pool
    implementation "com.zaxxer:HikariCP:$hikariVersion"

    // Exposed DB library
    implementation "org.jetbrains.exposed:exposed:$exposedVersion"

    // GSON json library
    implementation "com.google.code.gson:gson:$gsonVersion"

    // Log4J and Logback
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "ch.qos.logback:logback-core:$logbackVersion"

    // Use the Kotlin test library.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // Use the Kotlin JUnit integration.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    // Hamcrest for Junit
    testImplementation "org.hamcrest:hamcrest-junit:$hamcrestVersion"

    // Mockk Version
    testImplementation "io.mockk:mockk:$mockkVersion"

    testIntegrationImplementation "com.h2database:h2:$h2Version"
}

apply from: 'publish.gradle'
