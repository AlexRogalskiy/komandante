/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 */

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin on the JVM.
    id 'org.jetbrains.kotlin.jvm' version '1.3.41'
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'kotlin'

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

// versions
def javaVersion = JavaVersion.VERSION_1_8
def kotlinVersion = "1.3.41"
def kotlinXCoroutinesVersion = "1.3.0"
def arrowVersion = "0.9.0"
def rxjavaVersion = "2.2.0"
def rxKotlinVersion = "2.2.0"
def hamcrestVersion = "2.0.0.0"
def h2Version = "1.4.193"
def eclipselinkVersion = "2.7.4"
def hikariVersion = "3.3.1"
def mockkVersion = "1.9.3"
def exposedVersion = "0.16.1"
def jacksonVersion = "2.9.7"


// integration test setup starting
configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    main {
        output.dir file("out")
    }
    test {
        output.dir file("out")
    }
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            output.dir file('out')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

test {
    testLogging {
        events "PASSED",  "FAILED", "SKIPPED" //,"STARTED"
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    mustRunAfter test
}

check.dependsOn integrationTest

//integrationTest {
//    useJUnitPlatform {
//        includeEngines 'spek2'
//    }
//}

idea {
    module {
        testSourceDirs += sourceSets.integrationTest.java.srcDirs
        testSourceDirs += sourceSets.integrationTest.kotlin.srcDirs
        testResourceDirs += sourceSets.integrationTest.resources.srcDirs
        scopes.TEST.plus += [configurations.integrationTestCompile]
    }
}
// integration test setup finished


// dependency kotlin hack: fixed different kotlin-reflect versions on dependencies
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'org.jetbrains.kotlin' && requested.name == 'kotlin-reflect') {
            details.useVersion kotlinVersion
        }
    }
}


dependencies {
    // Use the Kotlin JDK 8 standard library.
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    // KotlinX Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinXCoroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactive:$kotlinXCoroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$kotlinXCoroutinesVersion"

    // Arrow
    implementation "io.arrow-kt:arrow-core-data:$arrowVersion"
    implementation "io.arrow-kt:arrow-effects-extensions:$arrowVersion"

    // RXJava
    implementation "io.reactivex.rxjava2:rxjava:$rxjavaVersion"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxKotlinVersion"

    // Reflection
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    // JPA 2.0 implementantion ???
    implementation "org.eclipse.persistence:eclipselink:$eclipselinkVersion"

    // Hikari JPA datasource connection pool
    implementation "com.zaxxer:HikariCP:$hikariVersion"

    // Exposed DB library
    implementation "org.jetbrains.exposed:exposed:$exposedVersion"

    // Jackson JSON library
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    // kotlin hack: this module required for data class constructor parameters
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    // kotlin hack: this module required for json date format annotation
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"

    // Use the Kotlin test library.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // Use the Kotlin JUnit integration.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    // Hamcrest for Junit
    testImplementation "org.hamcrest:hamcrest-junit:$hamcrestVersion"

    // Mockk Version
    testImplementation "io.mockk:mockk:$mockkVersion"

    integrationTestImplementation "com.h2database:h2:$h2Version"
}
